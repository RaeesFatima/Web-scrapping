# -*- coding: utf-8 -*-
"""hospitals.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WBjsNlk8ur5esdwrs0z58XIkqUl3KU01
"""

!pip install selenium

!pip install webdriver-manager

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options

options = Options()
options.add_argument('--headless')  # Run in headless mode
options.add_argument('--no-sandbox')  # Required for Colab
options.add_argument('--disable-dev-shm-usage')  # Overcome limited resources

!wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
!dpkg -i google-chrome-stable_current_amd64.deb
!apt-get -f install -y

!which google-chrome

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import time
# Set up Chrome in headless mode
options = Options()
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.binary_location = "/usr/bin/google-chrome"
options.add_argument("--no-proxy-server")

from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()),options=options)
try:
    driver.get("https://healthwire.pk/hospitals")
    hospitals_data = []
    city_dropdown = driver.find_element(By.ID, "city_filter")
    select = Select(city_dropdown)

    # Iterate through each city option
    for city_option in select.options:
        city_name = city_option.text
        print(f"Selecting city: {city_name}")
        select.select_by_visible_text(city_name)

        # Wait until the page is updated for the selected city
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, "hospital-search-list-block")))

        # Find all the hospital blocks
        hospital_blocks = driver.find_elements(By.CLASS_NAME, "hospital-search-list-block")
        # Collect initial hospital links
        for hospital in hospital_blocks:
            link_element = hospital.find_element(By.TAG_NAME, "a")
            href = link_element.get_attribute("href")
            print(f"Hospital link: {href}")
            hospitals_data.append(href)

        # Continue clicking 'Load More' until it's no longer visible
        while True:
            try:
                load_more_button = driver.find_element(By.CLASS_NAME, "load-more")
                # Scroll to the load more button to make it clickable
                ActionChains(driver).move_to_element(load_more_button).perform()
                load_more_button.click()
                print("Clicked 'Load More' button")

                # Wait for the new hospitals to load
                WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "hospital-search-list-block")))

                # Find new hospital blocks after loading more
                hospital_blocks = driver.find_elements(By.CLASS_NAME, "hospital-search-list-block")
                for hospital in hospital_blocks:
                    link_element = hospital.find_element(By.TAG_NAME, "a")
                    href = link_element.get_attribute("href")
                    print(f"Hospital link: {href}")
                    hospitals_data.append(href)

            except Exception as e:
                print("No more 'Load More' button found or error:", e)
                break  # Exit the loop if the "Load More" button is not found or any error occurs

finally:
    driver.quit()

# Optional: Print the collected hospital links
# print(hospitals_data)

from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from time import sleep

# Initialize WebDriver
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

def scrape_hospital_data(city_url):
    hospitals_data = []
    driver.get(city_url)

    while True:
        # Wait for hospital listings to load
        WebDriverWait(driver, 20).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "hospital-search-list-block")))

        hospitals = driver.find_elements(By.CLASS_NAME, "hospital-search-list-block")

        # Loop through each hospital and extract data
        for hospital in hospitals:
            hospital_data = {}

            # Hospital name
            name = hospital.find_element(By.CLASS_NAME, "d-hospital").find_element(By.TAG_NAME, "h1").text

            # Hospital image
            img_url = hospital.find_element(By.CLASS_NAME, "h-image").find_element(By.TAG_NAME, "img").get_attribute("src")

            # Location, available doctors, and opening time
            details = hospital.find_element(By.CLASS_NAME, "d-hospital").find_elements(By.TAG_NAME, "li")
            doctors = details[0].text if len(details) > 0 else None
            opening_time = details[1].text if len(details) > 1 else None
            location = details[2].text if len(details) > 2 else None

            # Store the data
            hospital_data["name"] = name
            hospital_data["image"] = img_url
            hospital_data["doctors"] = doctors
            hospital_data["opening_time"] = opening_time
            hospital_data["location"] = location

            hospitals_data.append(hospital_data)

        # Try to click "Load More" button to load more hospitals
        try:
            load_more_button = driver.find_element(By.CLASS_NAME, "load-more")
            load_more_button.click()
            sleep(2)  # Wait for new data to load
        except Exception as e:
            # If the "Load More" button is not found, break the loop
            print("No more pages to load.")
            break

    return hospitals_data

def scrape_all_cities():
    driver.get("https://healthwire.pk/hospitals")

    # Wait for the city dropdown to be present
    try:
        print("Waiting for city dropdown to load...")
        WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.ID, "city_filter")))
        print("City dropdown loaded.")

        city_hospital_data = {}

        # Re-fetch the dropdown inside the loop to avoid stale references
        city_dropdown = driver.find_element(By.ID, "city_filter")
        select = Select(city_dropdown)

        for city_option in select.options:
            city_name = city_option.text
            city_url = f"https://healthwire.pk/hospitals/{city_name}"

            print(f"Scraping hospitals in {city_name}...")

            # Scrape hospitals for the city
            hospitals_data = scrape_hospital_data(city_url)

            # Save the data for this city
            city_hospital_data[city_name] = hospitals_data

        return city_hospital_data

    except Exception as e:
        print(f"Error while waiting for city dropdown: {e}")
        return {}

try:
    city_hospital_data = scrape_all_cities()
    print(city_hospital_data)
finally:
    driver.quit()

from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains


from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import ElementClickInterceptedException, TimeoutException
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()),options=options)
try:
    driver.get("https://healthwire.pk/hospitals")
    hospitals_data = []
    city_dropdown = driver.find_element(By.ID, "city_filter")
    select = Select(city_dropdown)

    # Iterate through each city option
    for city_option in select.options:
        city_name = city_option.text
        print(f"Selecting city: {city_name}")
        if city_name == "Select City":
            continue  # Skip the default option

        select.select_by_visible_text(city_name)

        # Wait until the page is updated for the selected city
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, "hospital-search-list-block")))

        # Find all the hospital blocks
        hospital_blocks = driver.find_elements(By.CLASS_NAME, "hospital-search-list-block")
        for hospital in hospital_blocks:
            link_element = hospital.find_element(By.TAG_NAME, "a")
            href = link_element.get_attribute("href")
            print(f"Hospital link: {href}")

            try:
                # Scroll into view and ensure the link is clickable
                ActionChains(driver).move_to_element(link_element).perform()
                WebDriverWait(driver, 10).until(EC.element_to_be_clickable(link_element))
                link_element.click()
            except ElementClickInterceptedException:
                # If intercepted, scroll further or retry
                driver.execute_script("arguments[0].scrollIntoView(true);", link_element)
                link_element.click()

            # Wait for the hospital page to load
            WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, "hospital-profile-wraper")))

            # Locate and scrape hospital details
            hospital_profile_section = driver.find_element(By.CLASS_NAME, "hospital-profile-wraper")

            # Extract hospital image
            try:
                img_tag = hospital_profile_section.find_element(By.CSS_SELECTOR, ".h-image figure img")
                img_url = img_tag.get_attribute("src")
                print(f"Hospital image URL: {img_url}")
            except Exception as e:
                print("Error retrieving image:", e)
                img_url = None

            # Extract hospital details
            hospital_details = hospital_profile_section.find_element(By.CLASS_NAME, "d-hospital")

            try:
                hospital_name = hospital_details.find_element(By.TAG_NAME, "h1").text
                print(f"Hospital name: {hospital_name}")
            except Exception as e:
                print("Error retrieving hospital name:", e)
                hospital_name = None

            try:
                ul_tag = hospital_details.find_element(By.TAG_NAME, "ul")
                li_tags = ul_tag.find_elements(By.TAG_NAME, "li")
                available_doctors = li_tags[0].text if len(li_tags) > 0 else None
                timing = li_tags[1].text if len(li_tags) > 1 else None
                location = li_tags[2].text if len(li_tags) > 2 else None
                print(f"Available doctors: {available_doctors}")
                print(f"Timing: {timing}")
                print(f"Location: {location}")
            except Exception as e:
                print("Error retrieving hospital details:", e)
                available_doctors = timing = location = None

            # Save data
            hospital_data = {
                "name": hospital_name,
                "img_url": img_url,
                "available_doctors": available_doctors,
                "timing": timing,
                "location": location,
            }
            hospitals_data.append(hospital_data)

            # Go back to the hospital listing page
            driver.back()

            # Wait for the listing page to reload
            WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "hospital-search-list-block")))

finally:
    driver.quit()
# Optional: Print or save the collected hospital data
# print(hospitals_data)

from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import ElementClickInterceptedException, TimeoutException
from webdriver_manager.chrome import ChromeDriverManager
import csv

# Set up Chrome WebDriver
options = webdriver.ChromeOptions()
options.add_argument("--headless")  # Optional: Run browser in headless mode
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

try:
    driver.get("https://healthwire.pk/hospitals")
    hospitals_data = []
    city_dropdown = driver.find_element(By.ID, "city_filter")
    select = Select(city_dropdown)

    # Iterate through each city option
    for city_option in select.options:
        city_name = city_option.text
        if city_name == "Select City":
            continue  # Skip the default option

        print(f"Selecting city: {city_name}")
        select.select_by_visible_text(city_name)

        # Wait until the page is updated for the selected city
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, "hospital-search-list-block")))

        # Load all hospitals using the 'Load More' button
        while True:
            try:
                load_more_button = driver.find_element(By.ID, "load-more")
                ActionChains(driver).move_to_element(load_more_button).perform()
                load_more_button.click()
                print("Clicked 'Load More' button")
                WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "hospital-search-list-block")))
            except Exception:
                print("No more 'Load More' button or error occurred.")
                break

        # Get all hospital blocks
        hospital_blocks = driver.find_elements(By.CLASS_NAME, "hospital-search-list-block")
        for hospital in hospital_blocks:
            link_element = hospital.find_element(By.TAG_NAME, "a")
            href = link_element.get_attribute("href")

            try:
                # Visit each hospital's detail page
                driver.get(href)
                WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, "hospital-profile-wraper")))

                # Scrape hospital details
                hospital_profile_section = driver.find_element(By.CLASS_NAME, "hospital-profile-wraper")

                # Extract hospital image
                try:
                    img_tag = hospital_profile_section.find_element(By.CSS_SELECTOR, ".h-image figure img")
                    img_url = img_tag.get_attribute("src")
                except Exception:
                    img_url = None

                # Extract hospital details
                hospital_details = hospital_profile_section.find_element(By.CLASS_NAME, "d-hospital")

                try:
                    hospital_name = hospital_details.find_element(By.TAG_NAME, "h1").text
                except Exception:
                    hospital_name = None

                try:
                    ul_tag = hospital_details.find_element(By.TAG_NAME, "ul")
                    li_tags = ul_tag.find_elements(By.TAG_NAME, "li")
                    available_doctors = li_tags[0].text if len(li_tags) > 0 else None
                    timing = li_tags[1].text if len(li_tags) > 1 else None
                    location = li_tags[2].text if len(li_tags) > 2 else None
                except Exception:
                    available_doctors = timing = location = None

                # Save hospital data
                hospital_data = {
                    "city": city_name,
                    "hospital_name": hospital_name,
                    "img_url": img_url,
                    "available_doctors": available_doctors,
                    "timing": timing,
                    "location": location,
                }
                hospitals_data.append(hospital_data)
                print(f"Scraped data: {hospital_data}")

                # Go back to the hospital listing page
                driver.back()
                WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "hospital-search-list-block")))

            except Exception as e:
                print(f"Error scraping hospital {href}: {e}")

finally:
    driver.quit()

# Save data to a CSV file
output_file_path = "/content/hospitals_data.csv"
with open(output_file_path, mode="w", newline="", encoding="utf-8") as file:
    writer = csv.DictWriter(file, fieldnames=["city", "hospital_name", "img_url", "available_doctors", "timing", "location"])
    writer.writeheader()
    writer.writerows(hospitals_data)

print(f"Data saved to {output_file_path}")

from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))
try:
    driver.get("https://healthwire.pk/hospitals")
    hospitals_data = []
    city_dropdown = driver.find_element(By.ID, "city_filter")
    select = Select(city_dropdown)

    # Iterate through each city option
    for city_option in select.options:
        city_name = city_option.text
        print(f"Selecting city: {city_name}")
        select.select_by_visible_text(city_name)

        # Wait until the page is updated for the selected city
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, "hospital-search-list-block")))

        # Find all the hospital blocks
        hospital_blocks = driver.find_elements(By.CLASS_NAME, "hospital-search-list-block")
        # Collect initial hospital links
        for hospital in hospital_blocks:
            link_element = hospital.find_element(By.TAG_NAME, "a")
            href = link_element.get_attribute("href")
            print(f"Hospital link: {href}")
            hospitals_data.append(href)

        # Continue clicking 'Load More' until it's no longer visible
        while True:
            try:
                load_more_button = driver.find_element(By.ID, "load-more")
                # Scroll to the load more button to make it clickable
                ActionChains(driver).move_to_element(load_more_button).perform()
                load_more_button.click()
                print("Clicked 'Load More' button")

                # Wait for the new hospitals to load
                WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "hospital-search-list-block")))

                # Find new hospital blocks after loading more
                hospital_blocks = driver.find_elements(By.CLASS_NAME, "hospital-search-list-block")
                for hospital in hospital_blocks:
                    link_element = hospital.find_element(By.TAG_NAME, "a")
                    href = link_element.get_attribute("href")
                    print(f"Hospital link: {href}")
                    hospitals_data.append(href)

            except Exception as e:
                print("No more 'Load More' button found or error:", e)
                break  # Exit the loop if the "Load More" button is not found or any error occurs

finally:
    driver.quit()

# Optional: Print the collected hospital links
# print(hospitals_data)

from google.colab import drive
drive.mount('/content/drive')

from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import ElementClickInterceptedException, TimeoutException
from webdriver_manager.chrome import ChromeDriverManager
import json

# Set up Chrome WebDriver
options = webdriver.ChromeOptions()
options.add_argument("--headless")  # Optional: Run browser in headless mode
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

try:
    driver.get("https://healthwire.pk/hospitals")
    hospitals_data = []
    city_dropdown = driver.find_element(By.ID, "city_filter")
    select = Select(city_dropdown)

    # Iterate through each city option
    for city_option in select.options:
        city_name = city_option.text
        if city_name == "Select City":
            continue  # Skip the default option

        print(f"Selecting city: {city_name}")
        select.select_by_visible_text(city_name)

        # Wait until the page is updated for the selected city
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, "hospital-search-list-block")))

        # Load all hospitals using the 'Load More' button
        while True:
            try:
                load_more_button = driver.find_element(By.ID, "load-more")
                ActionChains(driver).move_to_element(load_more_button).perform()
                driver.execute_script("arguments[0].scrollIntoView(true);", load_more_button)
                load_more_button.click()
                print("Clicked 'Load More' button")
                WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "hospital-search-list-block")))
            except Exception:
                print("No more 'Load More' button or error occurred.")
                break

        # Get all hospital blocks
        hospital_blocks = driver.find_elements(By.CLASS_NAME, "hospital-search-list-block")
        for hospital in hospital_blocks:
            link_element = hospital.find_element(By.TAG_NAME, "a")
            href = link_element.get_attribute("href")

            try:
                # Visit each hospital's detail page
                driver.get(href)
                WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, "hospital-profile-wraper")))

                # Scrape hospital details
                hospital_profile_section = driver.find_element(By.CLASS_NAME, "hospital-profile-wraper")

                # Extract hospital image
                try:
                    img_tag = hospital_profile_section.find_element(By.CSS_SELECTOR, ".h-image figure img")
                    img_url = img_tag.get_attribute("src")
                except Exception:
                    img_url = None

                # Extract hospital details
                hospital_details = hospital_profile_section.find_element(By.CLASS_NAME, "d-hospital")

                try:
                    hospital_name = hospital_details.find_element(By.TAG_NAME, "h1").text
                except Exception:
                    hospital_name = None

                try:
                    ul_tag = hospital_details.find_element(By.TAG_NAME, "ul")
                    li_tags = ul_tag.find_elements(By.TAG_NAME, "li")
                    available_doctors = li_tags[0].text if len(li_tags) > 0 else None
                    timing = li_tags[1].text if len(li_tags) > 1 else None
                    location = li_tags[2].text if len(li_tags) > 2 else None
                except Exception:
                    available_doctors = timing = location = None

                # Save hospital data
                hospital_data = {
                    "city": city_name,
                    "hospital_name": hospital_name,
                    "img_url": img_url,
                    "available_doctors": available_doctors,
                    "timing": timing,
                    "location": location,
                }
                hospitals_data.append(hospital_data)
                print(f"Scraped data: {hospital_data}")

                # Go back to the hospital listing page
                driver.back()
                WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "hospital-search-list-block")))

            except Exception as e:
                print(f"Error scraping hospital {href}: {e}")

finally:
    driver.quit()

# Save data to a JSON file
output_file_path = "/content/hospitals_data.json"
with open(output_file_path, mode="w", encoding="utf-8") as file:
    json.dump(hospitals_data, file, indent=4, ensure_ascii=False)

print(f"Data saved to {output_file_path}")

from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import ElementClickInterceptedException, TimeoutException
from webdriver_manager.chrome import ChromeDriverManager
import json

# Set up Chrome WebDriver
options = webdriver.ChromeOptions()
options.add_argument("--headless")  # Optional: Run browser in headless mode
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

try:
    driver.get("https://healthwire.pk/hospitals")
    hospitals_data = []
    city_dropdown = driver.find_element(By.ID, "city_filter")
    select = Select(city_dropdown)

    # Iterate through each city option
    for city_option in select.options:
        city_name = city_option.text
        if city_name == "Select City":
            continue  # Skip the default option

        print(f"Selecting city: {city_name}")
        select.select_by_visible_text(city_name)

        # Wait until the page is updated for the selected city
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, "hospital-search-list-block")))

        # Load all hospitals using the 'Load More' button
        while True:
            try:
                load_more_button = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.ID, "load-more"))
                )
                driver.execute_script("arguments[0].scrollIntoView(true);", load_more_button)
                ActionChains(driver).move_to_element(load_more_button).perform()
                load_more_button.click()
                print("Clicked 'Load More' button")

                # Wait for new hospital blocks to load
                previous_count = len(driver.find_elements(By.CLASS_NAME, "hospital-search-list-block"))
                WebDriverWait(driver, 10).until(
                    lambda d: len(d.find_elements(By.CLASS_NAME, "hospital-search-list-block")) > previous_count
                )
            except (TimeoutException, ElementClickInterceptedException):
                print("No more 'Load More' button or interaction stopped.")
                break

        # Get all hospital blocks
        hospital_blocks = driver.find_elements(By.CLASS_NAME, "hospital-search-list-block")
        for hospital in hospital_blocks:
            link_element = hospital.find_element(By.TAG_NAME, "a")
            href = link_element.get_attribute("href")

            try:
                # Visit each hospital's detail page
                driver.get(href)
                WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, "hospital-profile-wraper")))

                # Scrape hospital details
                hospital_profile_section = driver.find_element(By.CLASS_NAME, "hospital-profile-wraper")

                # Extract hospital image
                try:
                    img_tag = hospital_profile_section.find_element(By.CSS_SELECTOR, ".h-image figure img")
                    img_url = img_tag.get_attribute("src")
                except Exception:
                    img_url = None

                # Extract hospital details
                hospital_details = hospital_profile_section.find_element(By.CLASS_NAME, "d-hospital")

                try:
                    hospital_name = hospital_details.find_element(By.TAG_NAME, "h1").text
                except Exception:
                    hospital_name = None

                try:
                    ul_tag = hospital_details.find_element(By.TAG_NAME, "ul")
                    li_tags = ul_tag.find_elements(By.TAG_NAME, "li")
                    available_doctors = li_tags[0].text if len(li_tags) > 0 else None
                    timing = li_tags[1].text if len(li_tags) > 1 else None
                    location = li_tags[2].text if len(li_tags) > 2 else None
                except Exception:
                    available_doctors = timing = location = None

                # Save hospital data
                hospital_data = {
                    "city": city_name,
                    "hospital_name": hospital_name,
                    "img_url": img_url,
                    "available_doctors": available_doctors,
                    "timing": timing,
                    "location": location,
                }
                hospitals_data.append(hospital_data)
                print(f"Scraped data: {hospital_data}")

                # Go back to the hospital listing page
                driver.back()
                WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "hospital-search-list-block")))

            except Exception as e:
                print(f"Error scraping hospital {href}: {e}")

finally:
    driver.quit()

# Save data to a JSON file
output_file_path = "/content/hospitals_data.json"
with open(output_file_path, mode="w", encoding="utf-8") as file:
    json.dump(hospitals_data, file, indent=4, ensure_ascii=False)

print(f"Data saved to {output_file_path}")

from google.colab import files
files.download('/content/hospitals_data.json')